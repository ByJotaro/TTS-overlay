# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import os
import sys
import json
import time
import tempfile
import threading
from dataclasses import dataclass, asdict, field
from typing import Optional, List

# --- GUI –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ ---
import tkinter as tk
from tkinter import ttk, messagebox
import TKinterModernThemes as TKMT

# --- –ê—É–¥–∏–æ –∏ TTS ---
import pygame
import pyaudio
import wave
import numpy as np
from gtts import gTTS
import pyttsx3
from pydub import AudioSegment

# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã ---
import keyboard
import ctypes
from ctypes import wintypes

# --- –í–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ ---
try:
    from voice_api import VoiceRSSAPI
except ImportError:
    print("–ú–æ–¥—É–ª—å voice_api.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –§—É–Ω–∫—Ü–∏–∏ VoiceRSS –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    VoiceRSSAPI = None

import logging
logging.basicConfig(
    filename="tts_overlay_debug.log",
    filemode="w",
    level=logging.DEBUG,
    format="%(asctime)s %(levelname)s %(message)s"
)
logging.debug("=== TTS Overlay —Å—Ç–∞—Ä—Ç—É–µ—Ç ===")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Windows API
KEYEVENTF_EXTENDEDKEY = 0x0001
KEYEVENTF_KEYUP = 0x0002
KEYEVENTF_SCANCODE = 0x0008
KEYEVENTF_UNICODE = 0x0004

# –ö–æ–¥—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
VK_CODE = {
    'backspace': 0x08, 'tab': 0x09, 'clear': 0x0C, 'enter': 0x0D, 'shift': 0x10,
    'ctrl': 0x11, 'alt': 0x12, 'pause': 0x13, 'caps_lock': 0x14, 'esc': 0x1B,
    'spacebar': 0x20, 'page_up': 0x21, 'page_down': 0x22, 'end': 0x23, 'home': 0x24,
    'left_arrow': 0x25, 'up_arrow': 0x26, 'right_arrow': 0x27, 'down_arrow': 0x28,
    'select': 0x29, 'print': 0x2A, 'execute': 0x2B, 'print_screen': 0x2C,
    'ins': 0x2D, 'del': 0x2E, 'help': 0x2F,
    '0': 0x30, '1': 0x31, '2': 0x32, '3': 0x33, '4': 0x34,
    '5': 0x35, '6': 0x36, '7': 0x37, '8': 0x38, '9': 0x39,
    'a': 0x41, 'b': 0x42, 'c': 0x43, 'd': 0x44, 'e': 0x45, 'f': 0x46,
    'g': 0x47, 'h': 0x48, 'i': 0x49, 'j': 0x4A, 'k': 0x4B, 'l': 0x4C,
    'm': 0x4D, 'n': 0x4E, 'o': 0x4F, 'p': 0x50, 'q': 0x51, 'r': 0x52,
    's': 0x53, 't': 0x54, 'u': 0x55, 'v': 0x56, 'w': 0x57, 'x': 0x58,
    'y': 0x59, 'z': 0x5A,
    'numpad_0': 0x60, 'numpad_1': 0x61, 'numpad_2': 0x62, 'numpad_3': 0x63,
    'numpad_4': 0x64, 'numpad_5': 0x65, 'numpad_6': 0x66, 'numpad_7': 0x67,
    'numpad_8': 0x68, 'numpad_9': 0x69,
    'multiply_key': 0x6A, 'add_key': 0x6B, 'separator_key': 0x6C,
    'subtract_key': 0x6D, 'decimal_key': 0x6E, 'divide_key': 0x6F,
    'f1': 0x70, 'f2': 0x71, 'f3': 0x72, 'f4': 0x73, 'f5': 0x74,
    'f6': 0x75, 'f7': 0x76, 'f8': 0x77, 'f9': 0x78, 'f10': 0x79,
    'f11': 0x7A, 'f12': 0x7B, 'f13': 0x7C, 'f14': 0x7D, 'f15': 0x7E,
    'f16': 0x7F, 'f17': 0x80, 'f18': 0x81, 'f19': 0x82, 'f20': 0x83,
    'f21': 0x84, 'f22': 0x85, 'f23': 0x86, 'f24': 0x87,
    'num_lock': 0x90, 'scroll_lock': 0x91, 'space': 0x20,
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
    'left_shift': 0xA0, 'right_shift': 0xA1, 'left_control': 0xA2,
    'right_control': 0xA3, 'left_menu': 0xA4, 'right_menu': 0xA5
}

@dataclass
class TTSSettings:
    output_device_index: int = 0
    mic_device_index: int = -1
    output_volume: float = 0.8
    mic_volume: float = 0.8
    voice_id: Optional[str] = None
    tts_engine: str = "google"
    voicerss_language: str = "ru-ru"
    voicerss_voice: Optional[str] = None
    voicerss_api_key: Optional[str] = ""
    voice_chat_key: Optional[str] = None
    history_hotkey_modifier: str = "ctrl"
    remove_queue: bool = False
    toggle_visibility_key: str = "alt+t"  # –ö–ª–∞–≤–∏—à–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é alt+t)
    focus_window_key: Optional[str] = None  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∑–∞–¥–∞–Ω–∞)
    settings_path: str = field(default_factory=lambda: os.path.join(os.path.dirname(sys.executable) if getattr(sys, 'frozen', False) else os.path.dirname(os.path.abspath(__file__)), "settings.json"), repr=False)

    def load_settings(self):
        if os.path.exists(self.settings_path):
            try:
                with open(self.settings_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                for key in asdict(self):
                    if key in data:
                        setattr(self, key, data[key] if data[key] is not None else None)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def save_settings(self):
        try:
            data = asdict(self)
            data.pop('settings_path', None)
            # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ None –∫ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ json
            for k, v in data.items():
                if v is None:
                    data[k] = ""
            with open(self.settings_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

class TTSOverlay(TKMT.ThemedTKinterFrame):
    def __init__(self):
        logging.debug("TTSOverlay.__init__() —Å—Ç–∞—Ä—Ç—É–µ—Ç")
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —Ç–µ–º–æ–π
        super().__init__("TTS Overlay", "azure", "dark", useconfigfile=False, usecommandlineargs=False)
        
        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ä–∞–º–∫—É –æ–∫–Ω–∞
        self.root.overrideredirect(True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω
        self.root.attributes('-topmost', True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pygame –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∑–≤—É–∫–∞
        pygame.mixer.init()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PyAudio –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
        self.p = pyaudio.PyAudio()
        logging.debug("PyAudio –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print("PyAudio –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ TTS
        self.engine = pyttsx3.init()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings = TTSSettings()
        self.settings.load_settings()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–æ–ª–æ—Å—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞
        self.create_title_bar()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.get_audio_devices()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        self.register_hotkeys()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∫—ç—à–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.cache_folder = os.path.join(os.path.dirname(sys.executable) if getattr(sys, 'frozen', False) else os.path.dirname(os.path.abspath(__file__)), "cache")
        if not os.path.exists(self.cache_folder):
            os.makedirs(self.cache_folder)
        
        # –û—á–µ—Ä–µ–¥—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.temp_files = []
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.cleanup_thread = threading.Thread(target=self.cleanup_temp_files, daemon=True)
        self.cleanup_thread.start()
        print("–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞
        self.cache_cleanup_thread = threading.Thread(target=self.cleanup_cache, daemon=True)
        self.cache_cleanup_thread.start()
        print("–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω")
        
        # –ë—É—Ñ–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ñ—Ä–∞–∑
        self.phrase_history = [""] * 10
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        self.is_playing = False
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        self.last_played_text = ""
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –æ–∫–Ω–æ –≤—Å–µ–≥–¥–∞ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω
        self.check_topmost()
        
        self.mic_thread = None
        self._stop_mic = False
        self.active_tts_threads = []
        self._tts_stop_flag = False
        self._tts_engines = []
        self._tts_events = []
        self.tts_lock = threading.Lock()
    
    def create_title_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–æ–ª–æ—Å—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª–æ—Å—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞
        self.title_bar = tk.Frame(self.root, bg="#1f1f1f", height=30)
        self.title_bar.pack(fill='x', side='top')
        self.title_bar.pack_propagate(False)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
        self.logo_label = tk.Label(self.title_bar, text="üîä TTS Overlay", bg="#1f1f1f", fg="white", font=("Arial", 10, "bold"))
        self.logo_label.pack(side='left', padx=10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.close_button = tk.Button(self.title_bar, text="‚úï", bg="#1f1f1f", fg="white", 
                                     borderwidth=0, highlightthickness=0, width=3, height=1, 
                                     activebackground="#e81123", activeforeground="white",
                                     command=self.on_close)
        self.close_button.pack(side='right')
        
        # –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        self.minimize_button = tk.Button(self.title_bar, text="‚Äî", bg="#1f1f1f", fg="white", 
                                        borderwidth=0, highlightthickness=0, width=3, height=1,
                                        activebackground="#333333", activeforeground="white",
                                        command=self.minimize_window)
        self.minimize_button.pack(side='right')
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_button = tk.Button(self.title_bar, text="‚öô", bg="#1f1f1f", fg="white", 
                                       borderwidth=0, highlightthickness=0, width=3, height=1,
                                       activebackground="#333333", activeforeground="white",
                                       command=self.open_settings)
        self.settings_button.pack(side='right')
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞
        self.title_bar.bind("<ButtonPress-1>", self.start_move)
        self.title_bar.bind("<ButtonRelease-1>", self.stop_move)
        self.title_bar.bind("<B1-Motion>", self.do_move)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞ —á–µ—Ä–µ–∑ –ª–æ–≥–æ—Ç–∏–ø
        self.logo_label.bind("<ButtonPress-1>", self.start_move)
        self.logo_label.bind("<ButtonRelease-1>", self.stop_move)
        self.logo_label.bind("<B1-Motion>", self.do_move)
    
    def start_move(self, event):
        """–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞"""
        self.x = event.x
        self.y = event.y
    
    def stop_move(self, event):
        """–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞"""
        self.x = None
        self.y = None
    
    def do_move(self, event):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–∫–Ω–∞"""
        if self.x is not None and self.y is not None:
            deltax = event.x - self.x
            deltay = event.y - self.y
            x = self.root.winfo_x() + deltax
            y = self.root.winfo_y() + deltay
            self.root.geometry(f"+{x}+{y}")
    
    def on_close(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–¥–µ—Ç
        if pygame.mixer.get_init() and pygame.mixer.music.get_busy():
            pygame.mixer.music.stop()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for file in self.temp_files:
            try:
                if os.path.exists(file):
                    os.remove(file)
            except:
                pass
        
        # –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        keyboard.unhook_all()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º PyAudio
        self.p.terminate()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.root.destroy()
        sys.exit(0)
    
    def minimize_window(self):
        """–°–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –æ–∫–Ω–æ –∫–∞–∫ Alt+T"""
        self.toggle_visibility()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º –ø–æ–¥ –ø–æ–ª–æ—Å–æ–π –∑–∞–≥–æ–ª–æ–≤–∫–∞
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        self.text_entry = tk.Text(main_frame, height=5, width=50, wrap="word", bg="#2a2a2a", fg="white", 
                                 insertbackground="white", relief="flat", font=("Arial", 10))
        self.text_entry.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        scrollbar = ttk.Scrollbar(self.text_entry, command=self.text_entry.yview)
        scrollbar.pack(side='right', fill='y')
        self.text_entry.config(yscrollcommand=scrollbar.set)
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill='x', pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        self.speak_button = ttk.Button(button_frame, text="üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", command=self.speak_text)
        self.speak_button.pack(side='left', padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_button = ttk.Button(button_frame, text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.open_settings)
        self.settings_button.pack(side='left', padx=5)
        
        # –°—Ç—Ä–æ–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤–æ")
        self.status_label = ttk.Label(main_frame, textvariable=self.status_var, anchor='w')
        self.status_label.pack(fill='x', pady=5)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        self.text_entry.bind("<Control-Return>", lambda e: self.speak_text())
        self.text_entry.bind("<Return>", lambda e: self.speak_text())  # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ Enter
    
    def get_audio_devices(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        devices = []
        
        for i in range(self.p.get_device_count()):
            device_info = self.p.get_device_info_by_index(i)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ int –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            max_output_channels = int(device_info['maxOutputChannels'])
            if max_output_channels > 0:
                devices.append((i, device_info['name']))
        
        self.output_devices = devices
        logging.debug(f"–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞: {len(self.output_devices)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞ –¥–ª—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        input_devices = []
        for i in range(self.p.get_device_count()):
            device_info = self.p.get_device_info_by_index(i)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ int –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            max_input_channels = int(device_info['maxInputChannels'])
            if max_input_channels > 0:
                input_devices.append((i, device_info['name']))
        
        self.mic_devices = input_devices
        logging.debug(f"–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞: {len(self.mic_devices)}")
    
    def register_hotkeys(self):
        try:
            keyboard.unhook_all()
            time.sleep(0.1)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ö–æ—Ç–∫–µ–µ–≤: {e}")
        toggle_key = self.settings.toggle_visibility_key or "alt+t"
        try:
            keyboard.add_hotkey(toggle_key, lambda: (self.root.after(0, self._toggle_visibility_mainthread), None)[1], suppress=True)
            logging.debug(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ö–æ—Ç–∫–µ–π –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏: {toggle_key}")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–æ—Ç–∫–µ–π –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ {toggle_key}: {e}")
            try:
                keyboard.add_hotkey("alt+t", lambda: (self.root.after(0, self._toggle_visibility_mainthread), None)[1], suppress=True)
                logging.debug("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ö–æ—Ç–∫–µ–π –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏: alt+t")
            except Exception as e2:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ö–æ—Ç–∫–µ–π: {e2}")
        focus_key = self.settings.focus_window_key
        if focus_key:
            try:
                keyboard.add_hotkey(focus_key, lambda: (self.root.after(0, self.show_and_focus_window), None)[1], suppress=True)
                logging.debug(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ö–æ—Ç–∫–µ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞: {focus_key}")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–æ—Ç–∫–µ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ {focus_key}: {e}")
        modifier = self.settings.history_hotkey_modifier or "ctrl"
        for i in range(10):
            hotkey = f"{modifier}+{i}"
            try:
                def create_handler(num):
                    return lambda: (self.root.after(0, self._play_saved_phrase_mainthread, num), None)[1]
                keyboard.add_hotkey(hotkey, create_handler(i), suppress=True)
                logging.debug(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ö–æ—Ç–∫–µ–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏: {hotkey}")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–æ—Ç–∫–µ–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ {hotkey}: {e}")
        if self.settings.voice_chat_key and self.settings.voice_chat_key != toggle_key:
            try:
                keyboard.add_hotkey(self.settings.voice_chat_key, lambda: (self.root.after(0, self.show_and_focus_window), None)[1], suppress=False)
                logging.debug(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ö–æ—Ç–∫–µ–π –¥–ª—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {self.settings.voice_chat_key}")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–æ—Ç–∫–µ–π –¥–ª—è voice_chat_key: {e}")
    
    def toggle_visibility(self):
        self.root.after(0, self._toggle_visibility_mainthread)

    def _toggle_visibility_mainthread(self):
        if self.root.state() == 'withdrawn':
            self.root.deiconify()
            self.root.update()
            self.root.attributes('-topmost', True)
            self.root.focus_force()
            logging.debug("–û–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ")
        else:
            self.root.withdraw()
            self.root.update()
            logging.debug("–û–∫–Ω–æ —Å–∫—Ä—ã—Ç–æ")
    
    def show_and_focus_window(self):
        def do_focus():
            self.root.deiconify()
            self.root.update()
            self.root.attributes('-topmost', True)
            self.root.lift()
            self.root.focus_force()
            self.text_entry.focus_set()
            self.text_entry.mark_set("insert", "end")
            self.root.after(100, self._ensure_focus)
            self.set_status("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ Enter")
        if threading.current_thread() is threading.main_thread():
            do_focus()
        else:
            self.root.after(0, do_focus)
    
    def _ensure_focus(self):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–∫—É—Å–∞"""
        if not self.root.focus_get():
            self.root.focus_force()
            self.text_entry.focus_set()
            self.text_entry.focus_force()
    
    def speak_text(self):
        def do_speak():
            text = self.text_entry.get("1.0", tk.END).strip()
            if not text:
                self.set_status("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è")
                return
            if text != self.last_played_text:
                self.add_to_history(text)
                self.last_played_text = text
            self.text_entry.delete("1.0", tk.END)
            self.root.withdraw()
            self.set_status("–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ...")
            self.check_and_fix_key_stuck()
            if getattr(self.settings, 'remove_queue', False):
                self.stop_playback()
            self._tts_stop_flag = False
            tts_event = threading.Event()
            def tts_job():
                try:
                    self.text_to_speech(text, tts_event)
                finally:
                    with self.tts_lock:
                        if threading.current_thread() in self.active_tts_threads:
                            self.active_tts_threads.remove(threading.current_thread())
            tts_thread = threading.Thread(target=tts_job, daemon=True)
            tts_thread.start()
            with self.tts_lock:
                self.active_tts_threads.append(tts_thread)
                self._tts_events.append(tts_event)
        if threading.current_thread() is threading.main_thread():
            do_speak()
        else:
            self.root.after(0, do_speak)
        return "break"
    
    def add_to_history(self, text):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ –∏—Å—Ç–æ—Ä–∏–∏
        if not self.phrase_history or text != self.phrase_history[0]:
            # –°–¥–≤–∏–≥–∞–µ–º –≤—Å–µ —Ñ—Ä–∞–∑—ã –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –≤–ø–µ—Ä–µ–¥ (–Ω–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ –±—É–¥–µ—Ç –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º 0)
            self.phrase_history = [text] + self.phrase_history[:-1]
    
    def play_saved_phrase(self, index):
        self.root.after(0, self._play_saved_phrase_mainthread, index)

    def _play_saved_phrase_mainthread(self, index):
        real_index = index - 1 if index > 0 else 9
        if 0 <= real_index < len(self.phrase_history) and self.phrase_history[real_index]:
            phrase = self.phrase_history[real_index]
            if getattr(self.settings, 'remove_queue', False):
                self.stop_playback()
            self.check_and_fix_key_stuck()
            self.set_status(f"üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã #{index}")
            self._tts_stop_flag = False
            tts_event = threading.Event()
            def tts_job():
                try:
                    self.text_to_speech(phrase, tts_event)
                finally:
                    with self.tts_lock:
                        if threading.current_thread() in self.active_tts_threads:
                            self.active_tts_threads.remove(threading.current_thread())
            tts_thread = threading.Thread(target=tts_job, daemon=True)
            tts_thread.start()
            with self.tts_lock:
                self.active_tts_threads.append(tts_thread)
                self._tts_events.append(tts_event)
    
    def cleanup_temp_files(self):
        """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        while True:
            time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            if self.temp_files:
                for file_path in list(self.temp_files):
                    try:
                        if os.path.exists(file_path):
                            os.unlink(file_path)
                            self.temp_files.remove(file_path)
                    except Exception as e:
                        # –ï—Å–ª–∏ —Ñ–∞–π–ª –µ—â–µ –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")
                        continue
    
    def generate_audio_google(self, text):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Google TTS"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫—ç—à–µ
        text_hash = hash(text)
        cache_path = os.path.join(self.cache_folder, f"{text_hash}.mp3")
        
        if os.path.exists(cache_path):
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {cache_path}")
            return cache_path
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
        try:
            tts = gTTS(text=text, lang='ru', slow=False)
            tts.save(cache_path)
            print(f"–ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: {cache_path}")
            return cache_path
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Google: {e}")
            return None
    
    def generate_audio_local(self, text):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ pyttsx3"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
        voices = self.engine.getProperty('voices')
        
        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π ID –≥–æ–ª–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if self.settings.voice_id:
            for voice in voices:
                if voice.id == self.settings.voice_id:
                    self.engine.setProperty('voice', voice.id)
                    break
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.mktemp(suffix='.wav')
        
        try:
            self.engine.save_to_file(text, temp_file)
            self.engine.runAndWait()
            print(f"–õ–æ–∫–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {temp_file}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            self.temp_files.append(temp_file)
            
            return temp_file
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –ª–æ–∫–∞–ª—å–Ω–æ: {e}")
            return None
    
    def generate_audio_voicerss(self, text):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ VoiceRSS API"""
        if VoiceRSSAPI is None:
            print("–ú–æ–¥—É–ª—å VoiceRSS API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return None
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API —Å –∫–ª—é—á–æ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –¥–µ–º–æ-–∫–ª—é—á–æ–º
            api_key = self.settings.voicerss_api_key
            if not api_key:
                api = VoiceRSSAPI()
                api_key = api.get_demo_key()
                print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-–∫–ª—é—á VoiceRSS API")
            else:
                api = VoiceRSSAPI(api_key)
            
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏ –≥–æ–ª–æ—Å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            language = self.settings.voicerss_language or "ru-ru"
            voice = self.settings.voicerss_voice
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            audio_file = api.text_to_speech(text, language, voice)
            if audio_file and os.path.exists(audio_file):
                print(f"VoiceRSS –∞—É–¥–∏–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {audio_file}")
                return audio_file
            else:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ VoiceRSS API –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ VoiceRSS: {e}")
            return None
    
    def text_to_speech(self, text, tts_event):
        tts_engine = self.settings.tts_engine
        if self._tts_stop_flag or tts_event.is_set():
            return
        try:
            if tts_engine == "google":
                audio_file = self.generate_audio_google(text)
                if self._tts_stop_flag or tts_event.is_set():
                    return
                if audio_file:
                    self.play_audio_output(audio_file)
                    if self.settings.mic_device_index != -1:
                        self.play_audio_mic(audio_file)
            elif tts_engine == "local":
                import pyttsx3
                engine = pyttsx3.init()
                self._tts_engines.append(engine)
                voices = engine.getProperty('voices')
                if self.settings.voice_id:
                    for voice in voices:
                        if voice.id == self.settings.voice_id:
                            engine.setProperty('voice', voice.id)
                            break
                temp_file = tempfile.mktemp(suffix='.wav')
                try:
                    engine.save_to_file(text, temp_file)
                    engine.runAndWait()
                    if self._tts_stop_flag or tts_event.is_set():
                        return
                    self.play_audio_output(temp_file)
                    if self.settings.mic_device_index != -1:
                        self.play_audio_mic(temp_file)
                finally:
                    engine.stop()
                    if engine in self._tts_engines:
                        self._tts_engines.remove(engine)
            elif tts_engine == "voicerss":
                audio_file = self.generate_audio_voicerss(text)
                if self._tts_stop_flag or tts_event.is_set():
                    return
                if audio_file:
                    self.play_audio_output(audio_file)
                    if self.settings.mic_device_index != -1:
                        self.play_audio_mic(audio_file)
        finally:
            try:
                self.active_tts_threads.remove(threading.current_thread())
            except Exception:
                pass
            try:
                self._tts_events.remove(tts_event)
            except Exception:
                pass
    
    def play_audio_output(self, audio_file):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ pygame (Sound.play, —á—Ç–æ–±—ã stop_playback –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª –≤—Å—ë)"""
        import pygame
        pygame.mixer.init()
        sound = pygame.mixer.Sound(audio_file)
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        for i in range(pygame.mixer.get_num_channels()):
            ch = pygame.mixer.Channel(i)
            ch.set_volume(min(self.settings.output_volume, 1.0))
        # –£—Å–∏–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –≤—ã—à–µ 100% —á–µ—Ä–µ–∑ numpy
        if self.settings.output_volume > 1.0:
            try:
                arr = pygame.sndarray.array(sound)
                arr = np.clip(arr * self.settings.output_volume, -32768, 32767).astype(arr.dtype)
                sound = pygame.sndarray.make_sound(arr)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å–∏–ª–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –≤—ã—à–µ 100%: {e}")
        sound.set_volume(min(self.settings.output_volume, 1.0))
        sound.play()
    
    def _press_mic_key(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        if not self.settings.voice_chat_key:
            return False
        
        key = self.settings.voice_chat_key
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ SendInput API
            success = self._send_input_key(key, press=True)
            if success:
                logging.debug(f"–ö–ª–∞–≤–∏—à–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ '{key}' —É—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞—Ç–∞")
                return True
                
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ keyboard
            keyboard.press(key)
            return keyboard.is_pressed(key)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")
            return False
        
    def _release_mic_key(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        if not self.settings.voice_chat_key:
            return False
        
        key = self.settings.voice_chat_key
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ SendInput API
            success = self._send_input_key(key, press=False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å–≤–æ–±–æ–¥–∏–ª–∞—Å—å –ª–∏ –∫–ª–∞–≤–∏—à–∞
            if success and not keyboard.is_pressed(key):
                logging.debug(f"–ö–ª–∞–≤–∏—à–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ '{key}' —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
                return True
            
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ keyboard
            keyboard.release(key)
            return not keyboard.is_pressed(key)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –∫–ª–∞–≤–∏—à–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")
            return False
        
    def play_audio_mic(self, audio_file):
        # –î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Virtual Audio Cable –∏–ª–∏ –∞–Ω–∞–ª–æ–≥
        mic_index = self.settings.mic_device_index
        if isinstance(mic_index, int) and mic_index >= 0:
            key_pressed = False
            try:
                print(f"–ù–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {mic_index})")
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV, –µ—Å–ª–∏ —ç—Ç–æ MP3
                if audio_file.endswith('.mp3'):
                    wav_file = self._convert_mp3_to_wav(audio_file)
                else:
                    wav_file = audio_file
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                if not wav_file or not os.path.exists(wav_file):
                    print(f"–§–∞–π–ª –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {wav_file}")
                    return
                wf = wave.open(wav_file, 'rb')
                channels = wf.getnchannels()
                width = wf.getsampwidth()
                rate = wf.getframerate()
                stream = self.p.open(format=self.p.get_format_from_width(width),
                                    channels=channels,
                                    rate=rate,
                                    output=True,
                                    output_device_index=mic_index)
                chunk_size = 1024
                data = wf.readframes(chunk_size)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–ª–∞–≤–∏—à–∏
                if len(data) > 0 and self.settings.voice_chat_key:
                    key = self.settings.voice_chat_key
                    logging.info(f"[MIC KEY] –ù–∞–∂–∏–º–∞–µ–º –∫–ª–∞–≤–∏—à—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ '{key}'")
                    
                    # –ù–∞–∂–∏–º–∞–µ–º –∫–ª–∞–≤–∏—à—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
                    key_pressed = self._press_mic_key()
                    logging.info(f"[MIC KEY] –ö–ª–∞–≤–∏—à–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {key_pressed}")
                
                try:
                    while len(data) > 0:
                        audio_data = np.frombuffer(data, dtype=np.int16)
                        # –£—Å–∏–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –≤—ã—à–µ 100%
                        audio_data = np.clip(audio_data * self.settings.mic_volume, -32768, 32767).astype(np.int16)
                        stream.write(audio_data.tobytes())
                        data = wf.readframes(chunk_size)
                finally:
                    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
                    if key_pressed and self.settings.voice_chat_key:
                        # –û—Ç–ø—É—Å–∫–∞–µ–º –∫–ª–∞–≤–∏—à—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                        self._release_mic_key()
                        logging.info(f"[MIC KEY] –ö–ª–∞–≤–∏—à–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                
                stream.stop_stream()
                stream.close()
                wf.close()
                print("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω: {e}")
                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                if key_pressed and self.settings.voice_chat_key:
                    self._release_mic_key()
                    logging.info(f"[MIC KEY] –ö–ª–∞–≤–∏—à–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
    
    def _convert_mp3_to_wav(self, mp3_file):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pydub –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ mp3 –≤ wav
        try:
            print("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MP3 –≤ WAV...")
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π wav —Ñ–∞–π–ª
            temp_wav = tempfile.mktemp(suffix='.wav')
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MP3 –≤ WAV —Å –ø–æ–º–æ—â—å—é pydub
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –≤ –ø–∞–ø–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                ffmpeg_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "ffmpeg", "bin")
                if os.path.exists(os.path.join(ffmpeg_path, "ffmpeg.exe")):
                    # –ï—Å–ª–∏ ffmpeg –µ—Å—Ç—å –≤ –ø–∞–ø–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –≤ PATH
                    os.environ["PATH"] += os.pathsep + ffmpeg_path
                    print(f"–ü—É—Ç—å –∫ ffmpeg –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH: {ffmpeg_path}")
                sound = AudioSegment.from_mp3(mp3_file)
                sound.export(temp_wav, format="wav")
                print(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {temp_wav}")
                return temp_wav
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é pydub: {e}")
                return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ MP3 –≤ WAV: {e}")
            return None
    
    def open_settings(self):
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        self._check_topmost_enabled = False
        keyboard.unhook_all()
        settings_window = tk.Toplevel(self.root)
        settings_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ TTS Overlay")
        settings_window.geometry("600x470")
        settings_window.resizable(False, False)
        settings_window.transient(self.root)
        settings_window.grab_set()
        settings_window.attributes('-topmost', True)
        settings_window.configure(bg="#2d2d2d")
        
        def on_close_settings():
            settings_window.destroy()
            self._check_topmost_enabled = True
            self.check_topmost()
            self.register_hotkeys()
        settings_window.protocol("WM_DELETE_WINDOW", on_close_settings)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        content_frame = ttk.Frame(settings_window, padding=10)
        content_frame.pack(fill='both', expand=True)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        notebook = ttk.Notebook(content_frame)
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
        style = ttk.Style()
        style.configure("TNotebook.Tab", padding=[12, 6])
        notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
        devices_frame = ttk.Frame(notebook, padding=10)
        notebook.add(devices_frame, text="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        
        # –í–∫–ª–∞–¥–∫–∞ "–î–≤–∏–∂–æ–∫ TTS"
        engine_frame = ttk.Frame(notebook, padding=10)
        notebook.add(engine_frame, text="–î–≤–∏–∂–æ–∫ TTS")
        
        # –í–∫–ª–∞–¥–∫–∞ "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏"
        hotkeys_frame = ttk.Frame(notebook, padding=10)
        notebook.add(hotkeys_frame, text="–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"
        about_frame = ttk.Frame(notebook, padding=10)
        notebook.add(about_frame, text="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        
        # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ===
        ttk.Label(devices_frame, text="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞:").grid(row=0, column=0, sticky='w', pady=5)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞
        output_device_var = tk.StringVar()
        output_device_combo = ttk.Combobox(devices_frame, textvariable=output_device_var, width=50, state="readonly")
        output_device_combo['values'] = [device[1] for device in self.output_devices]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        current_device_index = self.settings.output_device_index
        if 0 <= current_device_index < len(self.output_devices):
            output_device_var.set(self.output_devices[current_device_index][1])
        
        output_device_combo.grid(row=0, column=1, sticky='w', pady=5)
        
        # –ì—Ä–æ–º–∫–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞
        ttk.Label(devices_frame, text="–ì—Ä–æ–º–∫–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞:").grid(row=1, column=0, sticky='w', pady=5)
        
        output_volume_var = tk.DoubleVar(value=self.settings.output_volume)
        output_volume_slider = ttk.Scale(devices_frame, from_=0.0, to=2.0, orient='horizontal', 
                                        variable=output_volume_var, length=300)
        output_volume_slider.grid(row=1, column=1, sticky='w', pady=5)
        
        output_volume_label = ttk.Label(devices_frame, text=f"{int(output_volume_var.get() * 100)}%")
        output_volume_label.grid(row=1, column=2, sticky='w', pady=5)
        
        def update_output_volume(*args):
            output_volume_label.config(text=f"{int(output_volume_var.get() * 100)}%")
        
        output_volume_var.trace('w', update_output_volume)
        
        # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω
        ttk.Label(devices_frame, text="–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω:").grid(row=2, column=0, sticky='w', pady=5)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        mic_devices = []
        mic_devices.append((-1, "–û—Ç–∫–ª—é—á–µ–Ω–æ"))
        
        for i in range(self.p.get_device_count()):
            device_info = self.p.get_device_info_by_index(i)
            max_output_channels = int(device_info['maxOutputChannels'])
            if max_output_channels > 0:
                name = device_info['name']
                mic_devices.append((i, name))
        
        mic_device_var = tk.StringVar()
        mic_device_combo = ttk.Combobox(devices_frame, textvariable=mic_device_var, width=50, state="readonly")
        mic_device_combo['values'] = [device[1] for device in mic_devices]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∏–∫—Ä–æ—Ñ–æ–Ω
        current_mic_index = self.settings.mic_device_index
        for i, device in enumerate(mic_devices):
            if device[0] == current_mic_index:
                mic_device_var.set(device[1])
                break
        else:
            mic_device_var.set(mic_devices[0][1])  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–û—Ç–∫–ª—é—á–µ–Ω–æ"
        
        mic_device_combo.grid(row=2, column=1, sticky='w', pady=5)
        
        # –ì—Ä–æ–º–∫–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        ttk.Label(devices_frame, text="–ì—Ä–æ–º–∫–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:").grid(row=3, column=0, sticky='w', pady=5)
        
        mic_volume_var = tk.DoubleVar(value=self.settings.mic_volume)
        mic_volume_slider = ttk.Scale(devices_frame, from_=0.0, to=2.0, orient='horizontal', 
                                     variable=mic_volume_var, length=300)
        mic_volume_slider.grid(row=3, column=1, sticky='w', pady=5)
        
        mic_volume_label = ttk.Label(devices_frame, text=f"{int(mic_volume_var.get() * 100)}%")
        mic_volume_label.grid(row=3, column=2, sticky='w', pady=5)
        
        def update_mic_volume(*args):
            mic_volume_label.config(text=f"{int(mic_volume_var.get() * 100)}%")
        
        mic_volume_var.trace('w', update_mic_volume)
        
        # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–∏–∂–∫–∞ TTS ===
        ttk.Label(engine_frame, text="–î–≤–∏–∂–æ–∫ TTS:").grid(row=0, column=0, sticky='w', pady=5)
        
        engine_var = tk.StringVar(value=self.settings.tts_engine)
        
        engines = [
            ("Google TTS", "google"),
            ("–õ–æ–∫–∞–ª—å–Ω—ã–π TTS", "local"),
            ("VoiceRSS TTS", "voicerss")
        ]
        
        for i, (text, value) in enumerate(engines):
            ttk.Radiobutton(engine_frame, text=text, value=value, variable=engine_var).grid(
                row=i, column=0, sticky='w', pady=2)
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
        def toggle_engine():
            selected = engine_var.get()
            
            # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
            local_frame.grid_forget()
            voicerss_frame.grid_forget()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ—Ä–µ–π–º
            if selected == "local":
                local_frame.grid(row=len(engines), column=0, columnspan=2, sticky='w', pady=10)
            elif selected == "voicerss":
                voicerss_frame.grid(row=len(engines), column=0, columnspan=2, sticky='w', pady=10)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        engine_var.trace('w', lambda *args: toggle_engine())
        
        # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ ===
        local_frame = ttk.LabelFrame(engine_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞", padding=10)
        
        ttk.Label(local_frame, text="–ì–æ–ª–æ—Å:").grid(row=0, column=0, sticky='w', pady=5)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
        voices = self.engine.getProperty('voices')
        voice_var = tk.StringVar()
        voice_combo = ttk.Combobox(local_frame, textvariable=voice_var, width=50, state="readonly")
        voice_combo['values'] = [f"{voice.name} ({voice.id})" for voice in voices]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å
        current_voice_id = self.settings.voice_id
        for i, voice in enumerate(voices):
            if voice.id == current_voice_id:
                voice_var.set(f"{voice.name} ({voice.id})")
                break
        else:
            if voices:
                voice_var.set(f"{voices[0].name} ({voices[0].id})")
        
        voice_combo.grid(row=0, column=1, sticky='w', pady=5)
        
        # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VoiceRSS ===
        voicerss_frame = ttk.LabelFrame(engine_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ VoiceRSS", padding=10)
        
        ttk.Label(voicerss_frame, text="API –∫–ª—é—á:").grid(row=0, column=0, sticky='w', pady=5)
        
        voicerss_api_var = tk.StringVar(value=self.settings.voicerss_api_key)
        voicerss_api_entry = ttk.Entry(voicerss_frame, textvariable=voicerss_api_var, width=50)
        voicerss_api_entry.grid(row=0, column=1, sticky='w', pady=5)
        
        ttk.Label(voicerss_frame, text="–Ø–∑—ã–∫:").grid(row=1, column=0, sticky='w', pady=5)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        languages = {}
        if VoiceRSSAPI is not None:
            api = VoiceRSSAPI()
            languages = api.get_available_languages()
        
        voicerss_language_var = tk.StringVar()
        voicerss_language_combo = ttk.Combobox(voicerss_frame, textvariable=voicerss_language_var, width=50, state="readonly")
        voicerss_language_combo['values'] = [f"{code}: {name}" for code, name in languages.items()]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
        current_language = self.settings.voicerss_language
        for code, name in languages.items():
            if code == current_language:
                voicerss_language_var.set(f"{code}: {name}")
                break
        else:
            if languages:
                first_code = next(iter(languages.keys()))
                voicerss_language_var.set(f"{first_code}: {languages[first_code]}")
        
        voicerss_language_combo.grid(row=1, column=1, sticky='w', pady=5)
        
        ttk.Label(voicerss_frame, text="–ì–æ–ª–æ—Å:").grid(row=2, column=0, sticky='w', pady=5)
        
        voicerss_voice_var = tk.StringVar()
        voicerss_voice_combo = ttk.Combobox(voicerss_frame, textvariable=voicerss_voice_var, width=50, state="readonly")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞
        def update_voicerss_voices(*args):
            if VoiceRSSAPI is None:
                return
            
            try:
                api = VoiceRSSAPI()
                language_selection = voicerss_language_var.get()
                
                if ":" in language_selection:
                    language_code = language_selection.split(":")[0].strip()
                    voices_list = api.get_available_voices(language_code)
                    
                    if isinstance(voices_list, list):
                        voicerss_voice_combo['values'] = [f"{voice.get('name', '')} ({voice.get('gender', '')})" for voice in voices_list]
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å
                        current_voice = self.settings.voicerss_voice
                        for voice in voices_list:
                            if voice.get('name', '') == current_voice:
                                voicerss_voice_var.set(f"{voice.get('name', '')} ({voice.get('gender', '')})")
                                break
                        else:
                            if voices_list:
                                first_voice = voices_list[0]
                                voicerss_voice_var.set(f"{first_voice.get('name', '')} ({first_voice.get('gender', '')})")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤: {e}")
        
        voicerss_language_var.trace('w', update_voicerss_voices)
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤
        update_voicerss_voices()
        
        voicerss_voice_combo.grid(row=2, column=1, sticky='w', pady=5)
        
        # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à ===
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞: —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∫–ª–∞–≤–∏—à–∏
        allowed_keys = set([
            'ctrl', 'alt', 'shift', 'tab', 'space', 'enter', 'esc', 'backspace', 'capslock',
            'left', 'right', 'up', 'down', 'insert', 'delete', 'home', 'end', 'pageup', 'pagedown',
            'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10', 'f11', 'f12'
        ] + [chr(c) for c in range(ord('a'), ord('z')+1)] + [str(d) for d in range(0,10)])
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏
        def create_hotkey_field(parent, row, label_text, default_value, tooltip_text=None):
            ttk.Label(parent, text=label_text).grid(row=row, column=0, sticky='w', pady=5, padx=0)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏
            frame = ttk.Frame(parent)
            frame.grid(row=row, column=1, columnspan=3, sticky='w', pady=5, padx=(2,0))
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            var = tk.StringVar(value=default_value)
            entry = ttk.Entry(frame, textvariable=var, width=15)
            entry.pack(side='left', padx=(0,2), pady=0)
            
            # –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            def validate(event=None):
                key_text = var.get().strip().lower()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à (–Ω–∞–ø—Ä–∏–º–µ—Ä, alt+t)
                if "+" in key_text:
                    parts = key_text.split("+")
                    valid = all(part in allowed_keys for part in parts)
                else:
                    valid = key_text in allowed_keys or not key_text
                
                if key_text and not valid:
                    messagebox.showwarning("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–ª–∞–≤–∏—à–∞", 
                                          "–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∫–ª–∞–≤–∏—à–∏ (ctrl, alt, shift, tab, ...)\n"
                                          "–î–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: alt+t, ctrl+shift+f –∏ —Ç.–¥.")
                    var.set("")
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            entry.bind('<FocusOut>', validate)
            entry.bind('<Return>', validate)
            
            # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
            def clear():
                var.set("")
            
            clear_button = ttk.Button(frame, text="–•", width=2, command=clear)
            clear_button.pack(side='left', padx=(0,0), pady=0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
            if tooltip_text:
                ttk.Label(parent, text=tooltip_text, foreground="#666666", font=("Arial", 8)).grid(
                    row=row+1, column=0, columnspan=4, sticky='w', pady=(0,5), padx=(15,0))
            
            return var
        
        # –ö–ª–∞–≤–∏—à–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ–∫–Ω–∞
        toggle_visibility_var = create_hotkey_field(
            hotkeys_frame, 0, 
            "–ö–ª–∞–≤–∏—à–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞:", 
            self.settings.toggle_visibility_key or "alt+t",
            "–ù–∞–∂–∞—Ç–∏–µ —ç—Ç–æ–π –∫–ª–∞–≤–∏—à–∏ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é alt+t)"
        )
        
        # –ö–ª–∞–≤–∏—à–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        focus_window_var = create_hotkey_field(
            hotkeys_frame, 2, 
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞:", 
            self.settings.focus_window_key or "",
            "–ù–∞–∂–∞—Ç–∏–µ —ç—Ç–æ–π –∫–ª–∞–≤–∏—à–∏ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—è –µ–≥–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
        )
        
        # –ö–ª–∞–≤–∏—à–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞
        voice_chat_key_var = create_hotkey_field(
            hotkeys_frame, 4, 
            "–ö–ª–∞–≤–∏—à–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≤ –∏–≥—Ä–µ:", 
            self.settings.voice_chat_key or "",
            "–≠—Ç–∞ –∫–ª–∞–≤–∏—à–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∂–∏–º–∞—Ç—å—Å—è –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞"
        )
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        ttk.Label(hotkeys_frame, text="–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Ctrl):").grid(row=6, column=0, sticky='w', pady=5)
        modifiers = ["ctrl", "alt", "shift"] + [chr(c) for c in range(ord('a'), ord('z')+1)]
        history_modifier_var = tk.StringVar(value=self.settings.history_hotkey_modifier or "ctrl")
        history_modifier_combo = ttk.Combobox(hotkeys_frame, textvariable=history_modifier_var, width=10, state="readonly")
        history_modifier_combo['values'] = modifiers
        history_modifier_combo.grid(row=6, column=1, sticky='w', pady=5, padx=(40,0))
        ttk.Label(hotkeys_frame, text="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å —Ü–∏—Ñ—Ä–∞–º–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ñ—Ä–∞–∑", 
                 foreground="#666666", font=("Arial", 8)).grid(
            row=7, column=0, columnspan=4, sticky='w', pady=(0,5), padx=(15,0))
        
        # –ß–µ–∫–±–æ–∫—Å "–£–±—Ä–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"
        remove_queue_var = tk.BooleanVar(value=getattr(self.settings, 'remove_queue', False))
        remove_queue_check = ttk.Checkbutton(hotkeys_frame, text="–£–±—Ä–∞—Ç—å –æ—á–µ—Ä–µ–¥—å (—Å–ø–∞–º–∏—Ç—å –ì–° –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏)", variable=remove_queue_var)
        remove_queue_check.grid(row=8, column=0, columnspan=2, sticky='w', pady=8)
        
        # === –û –ø—Ä–æ–≥—Ä–∞–º–º–µ ===
        ttk.Label(about_frame, text="TTS Overlay", font=("Arial", 16, "bold")).pack(pady=10)
        ttk.Label(about_frame, text="–í–µ—Ä—Å–∏—è 1.3.0").pack(pady=5)
        ttk.Label(about_frame, text="¬© 2023-2024").pack(pady=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
        cache_size = self.get_cache_size()
        ttk.Label(about_frame, text=f"–†–∞–∑–º–µ—Ä –∫—ç—à–∞: {cache_size:.2f} –ú–ë").pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
        clear_cache_button = ttk.Button(about_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", 
                                       command=lambda: clear_cache())
        clear_cache_button.pack(pady=10)
        
        def clear_cache():
            try:
                # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –∫—ç—à–∞
                cache_folder = os.path.join(os.path.dirname(sys.executable) if getattr(sys, 'frozen', False) else os.path.dirname(os.path.abspath(__file__)), "cache")
                for root, dirs, files in os.walk(cache_folder):
                    for file in files:
                        file_path = os.path.join(root, file)
                        try:
                            os.unlink(file_path)
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                
                messagebox.showinfo("–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞", "–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –∫—ç—à–∞
                cache_size = self.get_cache_size()
                ttk.Label(about_frame, text=f"–†–∞–∑–º–µ—Ä –∫—ç—à–∞: {cache_size:.2f} –ú–ë").pack(pady=5)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à: {e}")
        
        # –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –æ–∫–Ω–∞
        buttons_frame = ttk.Frame(settings_window)
        buttons_frame.pack(fill='x', pady=10, padx=10)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º–∏
        style = ttk.Style()
        style.configure("SaveButton.TButton", font=("Arial", 10, "bold"), padding=6)
        style.configure("CancelButton.TButton", font=("Arial", 10), padding=6)
        
        save_button = ttk.Button(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", style="SaveButton.TButton",
                                command=lambda: save_settings())
        save_button.pack(side='right', padx=5)
        
        cancel_button = ttk.Button(buttons_frame, text="–û—Ç–º–µ–Ω–∞", style="CancelButton.TButton", 
                                  command=on_close_settings)
        cancel_button.pack(side='right', padx=5)
        
        def save_settings():
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
                self.settings.output_volume = output_volume_var.get()
                self.settings.mic_volume = mic_volume_var.get()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–≤–∏–∂–æ–∫
                self.settings.tts_engine = engine_var.get()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
                if self.settings.tts_engine == "local":
                    selected_voice = voice_var.get()
                    for voice in voices:
                        if f"{voice.name} ({voice.id})" == selected_voice:
                            self.settings.voice_id = voice.id
                            break
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VoiceRSS
                if self.settings.tts_engine == "voicerss":
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫
                    language_selection = voicerss_language_var.get()
                    if ":" in language_selection:
                        self.settings.voicerss_language = language_selection.split(":")[0].strip()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å
                    voice_selection = voicerss_voice_var.get()
                    if "(" in voice_selection:
                        self.settings.voicerss_voice = voice_selection.split("(")[0].strip()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á
                    self.settings.voicerss_api_key = voicerss_api_var.get()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞
                output_device_name = output_device_var.get()
                for i, device in enumerate(self.output_devices):
                    if device[1] == output_device_name:
                        self.settings.output_device_index = i
                        break
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                mic_device_name = mic_device_var.get()
                for device in mic_devices:
                    if device[1] == mic_device_name:
                        self.settings.mic_device_index = device[0]
                        break
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ–∫–Ω–∞
                toggle_key = toggle_visibility_var.get().strip().lower()
                if toggle_key and toggle_key != "alt+t":
                    self.settings.toggle_visibility_key = toggle_key
                else:
                    self.settings.toggle_visibility_key = "alt+t"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏—à—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
                focus_key = focus_window_var.get().strip().lower()
                if focus_key == "–Ω–µ –∑–∞–¥–∞–Ω–æ" or not focus_key:
                    self.settings.focus_window_key = None
                else:
                    self.settings.focus_window_key = focus_key
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏—à—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞
                voice_chat_key = voice_chat_key_var.get().strip().lower()
                if voice_chat_key == "–Ω–µ –∑–∞–¥–∞–Ω–æ" or not voice_chat_key:
                    self.settings.voice_chat_key = None
                else:
                    self.settings.voice_chat_key = voice_chat_key
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                self.settings.history_hotkey_modifier = history_modifier_var.get()
                self.settings.remove_queue = remove_queue_var.get()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª
                self.settings.save_settings()
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                on_close_settings()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ—Ä–µ–π–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
        toggle_engine()
    
    def open_url(self, url):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        import webbrowser
        webbrowser.open(url)
    
    def get_cache_size(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞ –≤ MB"""
        total_size = 0
        if os.path.exists(self.cache_folder):
            for file in os.listdir(self.cache_folder):
                file_path = os.path.join(self.cache_folder, file)
                if os.path.isfile(file_path):
                    total_size += os.path.getsize(file_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ –º–µ–≥–∞–±–∞–π—Ç—ã
        return total_size / (1024 * 1024)
    
    def cleanup_cache(self):
        """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞"""
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
                time.sleep(6 * 60 * 60)
                
                # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (–≤ –±–∞–π—Ç–∞—Ö) - 100 –ú–ë
                max_cache_size = 100 * 1024 * 1024
                
                if os.path.exists(self.cache_folder):
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ —Å –∏—Ö —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    files = []
                    total_size = 0
                    
                    for file_name in os.listdir(self.cache_folder):
                        file_path = os.path.join(self.cache_folder, file_name)
                        if os.path.isfile(file_path):
                            file_size = os.path.getsize(file_path)
                            file_time = os.path.getmtime(file_path)
                            files.append((file_path, file_size, file_time))
                            total_size += file_size
                    
                    # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
                    if total_size > max_cache_size:
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
                        files.sort(key=lambda x: x[2])
                        
                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã, –ø–æ–∫–∞ —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
                        for file_path, file_size, _ in files:
                            try:
                                os.remove(file_path)
                                total_size -= file_size
                                print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∫—ç—à–∞: {file_path}")
                                
                                if total_size <= max_cache_size:
                                    break
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫—ç—à–∞ {file_path}: {e}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
    
    def stop_playback(self):
        """–ë—ã—Å—Ç—Ä–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        import pygame
        self._tts_stop_flag = True
        
        # –û—Ç–ø—É—Å–∫–∞–µ–º –∫–ª–∞–≤–∏—à—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞–∂–∞—Ç–∞
        if self.settings.voice_chat_key:
            self._release_mic_key()
        
        # –ì–ª—É—à–∏–º –∑–≤—É–∫
        if pygame.mixer.get_init():
            pygame.mixer.stop()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –¥–≤–∏–∂–∫–∏ pyttsx3
        for engine in list(self._tts_engines):
            try:
                engine.stop()
                self._tts_engines.remove(engine)
            except Exception:
                pass
        
        # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫–∞–º –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
        for ev in list(self._tts_events):
            ev.set()
        
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        self.active_tts_threads.clear()
        self._tts_events.clear()
        self.set_status("‚èπ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
    def check_and_fix_key_stuck(self):
        if self.settings.voice_chat_key:
            try:
                if keyboard.is_pressed(self.settings.voice_chat_key):
                    with self.tts_lock:
                        self._release_mic_key()
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ª–∏–ø—à–µ–π –∫–ª–∞–≤–∏—à–∏: {e}")
    
    def load_phrase(self, index):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –ø–æ–ª–µ, –Ω–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è)"""
        if 0 <= index < len(self.phrase_history) and self.phrase_history[index]:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
            self.text_entry.delete("1.0", tk.END)
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            self.text_entry.insert("1.0", self.phrase_history[index])
            self.set_status(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ñ—Ä–∞–∑–∞ {index+1}: {self.phrase_history[index][:20]}...")
            # –ù–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    
    def set_status(self, text):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_var.set(text)
    
    def check_topmost(self):
        if getattr(self, '_check_topmost_enabled', True):
            if self.root.state() != 'withdrawn':
                self.root.attributes('-topmost', True)
                self.root.lift()
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ "–∑–∞–ª–∏–ø–ª–∞" –ª–∏ –∫–ª–∞–≤–∏—à–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            self.check_and_fix_key_stuck()
            
        self.root.after(2000, self.check_topmost)

    def _send_input_key(self, key_code, press=True):
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è/–æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à–∏ —á–µ—Ä–µ–∑ SendInput API.
        """
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á –≤ –∫–æ–¥ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏—à–∏
            if isinstance(key_code, str):
                if key_code.lower() in VK_CODE:
                    key_code = VK_CODE[key_code.lower()]
                elif len(key_code) == 1 and key_code.isalpha():
                    key_code = ord(key_code.upper())
                else:
                    logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥ –∫–ª–∞–≤–∏—à–∏: {key_code}")
                    return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è SendInput
            LONG = ctypes.c_long
            DWORD = ctypes.c_ulong
            ULONG_PTR = ctypes.POINTER(DWORD)
            WORD = ctypes.c_ushort
            
            class MOUSEINPUT(ctypes.Structure):
                _fields_ = (("dx", LONG), ("dy", LONG), ("mouseData", DWORD),
                           ("dwFlags", DWORD), ("time", DWORD), ("dwExtraInfo", ULONG_PTR))
            
            class KEYBDINPUT(ctypes.Structure):
                _fields_ = (("wVk", WORD), ("wScan", WORD), ("dwFlags", DWORD),
                           ("time", DWORD), ("dwExtraInfo", ULONG_PTR))
            
            class HARDWAREINPUT(ctypes.Structure):
                _fields_ = (("uMsg", DWORD), ("wParamL", WORD), ("wParamH", WORD))
            
            class _INPUTunion(ctypes.Union):
                _fields_ = (("mi", MOUSEINPUT), ("ki", KEYBDINPUT), ("hi", HARDWAREINPUT))
            
            class INPUT(ctypes.Structure):
                _fields_ = (("type", DWORD), ("_input", _INPUTunion))
            
            # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
            INPUT_KEYBOARD = 1
            KEY_KEYUP = 0x0002
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è/–æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à–∏
            x = INPUT(type=INPUT_KEYBOARD, 
                     _input=_INPUTunion(ki=KEYBDINPUT(wVk=key_code, 
                                                     wScan=0, 
                                                     dwFlags=0 if press else KEY_KEYUP, 
                                                     time=0, 
                                                     dwExtraInfo=None)))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–≤–æ–¥
            ctypes.windll.user32.SendInput(1, ctypes.byref(x), ctypes.sizeof(x))
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ SendInput API: {e}")
            try:
                # –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ keyboard
                if press:
                    keyboard.press(key_code)
                else:
                    keyboard.release(key_code)
                return True
            except:
                return False

    def _test_key_methods(self):
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —ç–º—É–ª—è—Ü–∏–∏ –∫–ª–∞–≤–∏—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        """
        if not self.settings.voice_chat_key:
            logging.warning("–ö–ª–∞–≤–∏—à–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return
        
        key = self.settings.voice_chat_key
        logging.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —ç–º—É–ª—è—Ü–∏–∏ –∫–ª–∞–≤–∏—à–∏ '{key}'...")
        
        # –¢–µ—Å—Ç SendInput API
        try:
            logging.debug("–¢–µ—Å—Ç SendInput API...")
            success = self._send_input_key(key, press=True)
            time.sleep(0.05)
            self._send_input_key(key, press=False)
            if success:
                logging.info("SendInput API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                logging.warning("SendInput API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ SendInput API: {e}")
        
        # –¢–µ—Å—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ keyboard
        try:
            logging.debug("–¢–µ—Å—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ keyboard...")
            keyboard.press(key)
            time.sleep(0.05)
            is_pressed = keyboard.is_pressed(key)
            keyboard.release(key)
            if is_pressed:
                logging.info("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ keyboard —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                logging.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ keyboard –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ keyboard: {e}")
        
        logging.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —ç–º—É–ª—è—Ü–∏–∏ –∫–ª–∞–≤–∏—à –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    


if __name__ == "__main__":
    logging.debug("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    try:
        app = TTSOverlay()
        app.run()
    except Exception as e:
        logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc() 